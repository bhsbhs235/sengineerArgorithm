class Solution {
    public int maxDepth(Node root) {
        if(root==null) return 0;
        
        Queue<Node> q = new LinkedList<>();
        /* offer que에 넣는것
           poll que에서 빼는것
           peek 다음 값이 먼지 확인만 하는 것 */
        
        q.offer(root);
        int depth = 0;
        while(!q.isEmpty()){
            depth++;
            int size = q.size();
            for(int i=0; i<size; i++){
                Node node = q.poll();
                for(Node child:node.children){
                    q.offer(child);        
                }
            }
        }
        return depth;
    }
}


/* 
                                                         1
                                           
                               3                         2                         4
                               
                        5            6
     
트리가 다음인 같은 경우 depth 1 일 때 que 는 1 for ( i=0 ; i<1 ; i++)
                      depth 2 일 때 que 는 3,2,4  for(i=0; i<3 ; i++)에서 4가 poll되는데 4 밑에는 children이 없기 때문에 null
                                             2도 poll되는데 2 밑에도 children이 없기 때문에 null
                                             3은 밑에 children 5,6을 찾아서 offer
                      따라서 현재 que에는 5,6
                      depth 3 일 때 que는 5,6 for(i=0; i<2; i++) 이 된다 6, 5 순서대로 poll되는데 children이 없기 때문에 null 
                      따라서 depth는 3이다.
                      
                      주의할점은 int size = q.size(); 에서 사이즈를 구해서 for문에 넣어야 한다는 것
                      for ( int i=0; i<q.size(); i++) 를 하면 밑의 문장 q.poll() 또는 q.offer에서 q의 사이즈가 변할수 있기 때문이다.
 */
 
                   
